<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>flbu blog</title>
  
  <subtitle>记录生活点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-11T07:32:25.570Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>flbu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode20.有效的括号</title>
    <link href="http://yoursite.com/2020/03/11/Leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://yoursite.com/2020/03/11/Leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2020-03-11T07:21:57.000Z</published>
    <updated>2020-03-11T07:32:25.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leetcode20-有效的括号"><a href="#Leetcode20-有效的括号" class="headerlink" title="Leetcode20.有效的括号"></a>Leetcode20.有效的括号</h2><p><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">题目链接</a></p><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><p>输入: </p><blockquote><p>“()”</p></blockquote><p>输出: </p><blockquote><p>true</p></blockquote><p>示例 2:</p><p>输入: </p><blockquote><p>“()[]{}”</p></blockquote><p>输出:</p><blockquote><p>true</p></blockquote><p>示例 3:</p><p>输入:</p><blockquote><p>“(]”</p></blockquote><p>输出:</p><blockquote><p>false</p></blockquote><p>示例 4:</p><p>输入:</p><blockquote><p>“([)]”</p></blockquote><p>输出:</p><blockquote><p>false</p></blockquote><p>示例 5:</p><p>输入: </p><blockquote><p>“{[]}”</p></blockquote><p>输出:</p><blockquote><p>true</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.equals(<span class="string">""</span>)||s == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//构造栈</span></span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="comment">//左括号入栈</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span>||c==<span class="string">'['</span>||c==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右括号</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//排除右括号入栈时栈空情况，例："]"</span></span><br><span class="line">                 <span class="keyword">if</span> (stack.isEmpty())&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c==<span class="string">')'</span>&amp;&amp;((Character)stack.pop())!=<span class="string">'('</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c==<span class="string">']'</span>&amp;&amp;((Character)stack.pop())!=<span class="string">'['</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (c==<span class="string">'&#125;'</span>&amp;&amp;((Character)stack.pop())!=<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后栈空则匹配</span></span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Leetcode20-有效的括号&quot;&gt;&lt;a href=&quot;#Leetcode20-有效的括号&quot; class=&quot;headerlink&quot; title=&quot;Leetcode20.有效的括号&quot;&gt;&lt;/a&gt;Leetcode20.有效的括号&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Stack,Java" scheme="http://yoursite.com/tags/Stack-Java/"/>
    
  </entry>
  
  <entry>
    <title>Leecode118.杨辉三角</title>
    <link href="http://yoursite.com/2020/03/10/Leetcode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
    <id>http://yoursite.com/2020/03/10/Leetcode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</id>
    <published>2020-03-10T04:29:30.000Z</published>
    <updated>2020-03-11T07:24:42.979Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leetcode118-杨辉三角"><a href="#Leetcode118-杨辉三角" class="headerlink" title="Leetcode118. 杨辉三角"></a>Leetcode118. 杨辉三角</h3><p>给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。</p><p>在杨辉三角中，每个数是它左上方和右上方的数的和。</p><a id="more"></a><p>示例:</p><p>输入:</p><blockquote><p>5</p></blockquote><p>输出:</p><blockquote><p>[</p><p>​      [1],<br>    [1,1],<br>   [1,2,1],<br>  [1,3,3,1],<br> [1,4,6,4,1]<br>]</p></blockquote><p><a href="https://leetcode-cn.com/problems/pascals-triangle" target="_blank" rel="noopener">杨辉三角</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; generate(<span class="keyword">int</span> numRows) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        <span class="comment">//numRows</span></span><br><span class="line">        <span class="keyword">if</span>(numRows&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一行一定为1</span></span><br><span class="line">        result.add(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        result.get(<span class="number">0</span>).add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//rowNum=1，即从第二行开始</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> rowNum = <span class="number">1</span> ; rowNum &lt; numRows ; rowNum++)&#123;</span><br><span class="line">            <span class="comment">//本行</span></span><br><span class="line">            List&lt;Integer&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="comment">//上一行</span></span><br><span class="line">            List&lt;Integer&gt; preRow = result.get(rowNum-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//一行中第一个为1</span></span><br><span class="line">            row.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j&lt;rowNum;j++)&#123;</span><br><span class="line">                row.add(preRow.get(j-<span class="number">1</span>)+preRow.get(j));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//一行中最后一个为1</span></span><br><span class="line">            row.add(<span class="number">1</span>);</span><br><span class="line">            result.add(row);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Leetcode118-杨辉三角&quot;&gt;&lt;a href=&quot;#Leetcode118-杨辉三角&quot; class=&quot;headerlink&quot; title=&quot;Leetcode118. 杨辉三角&quot;&gt;&lt;/a&gt;Leetcode118. 杨辉三角&lt;/h3&gt;&lt;p&gt;给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。&lt;/p&gt;
&lt;p&gt;在杨辉三角中，每个数是它左上方和右上方的数的和。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Leecode66.加一</title>
    <link href="http://yoursite.com/2019/11/27/Leetcode66-%E5%8A%A0%E4%B8%80/"/>
    <id>http://yoursite.com/2019/11/27/Leetcode66-%E5%8A%A0%E4%B8%80/</id>
    <published>2019-11-27T11:36:30.000Z</published>
    <updated>2020-03-11T07:24:08.274Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Leecode题解66-加一"><a href="#Leecode题解66-加一" class="headerlink" title="Leecode题解66.加一"></a>Leecode题解66.加一</h3><p><a href="https://leetcode-cn.com/problems/plus-one/" target="_blank" rel="noopener">Leecode 66.加一</a></p><p>给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><a id="more"></a><p>示例 1:</p><blockquote><p>输入: [1,2,3]</p><p>输出: [1,2,4]</p><p>解释: 输入数组表示数字 123。</p></blockquote><p>示例 2:</p><blockquote><p>输入: [4,3,2,1]</p><p>输出: [4,3,2,2]<br>解释: 输入数组表示数字 4321.</p></blockquote><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] plusOne(<span class="keyword">int</span>[] digits) &#123;</span><br><span class="line">        <span class="keyword">int</span> len = digits.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            digits[i]++;</span><br><span class="line">            digits[i]%=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(digits[i]!=<span class="number">0</span>) <span class="keyword">return</span> digits;</span><br><span class="line">        &#125;</span><br><span class="line">        digits = <span class="keyword">new</span> <span class="keyword">int</span>[len+<span class="number">1</span>];</span><br><span class="line">        digits[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路:</p><p><strong>加一的所以有可能的情况就只有两种：</strong></p><p><strong>除 99 之外的数字加一；</strong><br><strong>数字 99。</strong><br><strong>加一得十进一位个位数为 00 加法运算如不出现进位就运算结束了且进位只会是一。</strong></p><p><strong>所以只需要判断有没有进位并模拟出它的进位方式，如十位数加 11 个位数置为 00，如此循环直到判断没有再进位就退出循环返回结果。</strong></p><p><strong>然后还有一些特殊情况就是当出现 9999、999999 之类的数字时，循环到最后也需要进位，出现这种情况时需要手动将它进一位。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Leecode题解66-加一&quot;&gt;&lt;a href=&quot;#Leecode题解66-加一&quot; class=&quot;headerlink&quot; title=&quot;Leecode题解66.加一&quot;&gt;&lt;/a&gt;Leecode题解66.加一&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/plus-one/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leecode 66.加一&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。&lt;/p&gt;
&lt;p&gt;最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。&lt;/p&gt;
&lt;p&gt;你可以假设除了整数 0 之外，这个整数不会以零开头。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Math, Java" scheme="http://yoursite.com/tags/Math-Java/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="http://yoursite.com/2019/11/24/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/11/24/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-11-24T12:18:48.000Z</published>
    <updated>2019-11-24T13:41:09.059Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><h3 id="格式：参数-gt-表达式"><a href="#格式：参数-gt-表达式" class="headerlink" title="格式：参数 -&gt; (表达式)"></a>格式：参数 -&gt; (表达式)</h3><p>如果代码要完成的计算无法放在一个表达式中，可以把代码放在{}中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(str, (String first,String second) -&gt; (<span class="keyword">return</span> (first.length()-second.length()))</span><br></pre></td></tr></table></figure><p>即使lambda无参数，也要提供空括号.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">()-&gt; &#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) System.out.println(i);&#125;</span><br></pre></td></tr></table></figure><p>如果可以推导出一个lambda的参数类型，则可以忽略参数类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(friends,(first,second) -&gt; (first.length()-second.length()));<span class="comment">//friends是一个字符串数组</span></span><br></pre></td></tr></table></figure><p>无需指定lambda的返回值类型，返回值类型会由上下文推导得到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String str1,String str2) -&gt; str1.length()-str2.length();</span><br></pre></td></tr></table></figure><a id="more"></a> <h3 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h3><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda，这种接口叫做函数式接口。</p><p><strong>lambda可以转换为函数式接口</strong>，举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(words, (first,second)-&gt;first.length()-second.length());</span><br><span class="line">people.removeIf(person -&gt; (person.getName().length()&gt;<span class="number">3</span>)); <span class="comment">//removeIf接受一个Predicate参数，这个接口专门用来传递lambda表达式</span></span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>可以<code>::</code>分隔方法名与对象或类名。主要有3种情况。</p><ol><li>object::instanceMethod</li><li>Class::staticMethod</li><li>Class:;instanceMethod</li></ol><p>前2种情况下，方法引用等价于提供方法参数的lambda表达式。</p><blockquote><p>System.out::println等价于x -&gt; System.out.println(x);</p><p>Math::power等价于(x,y) -&gt; (Math.power(x,y));</p></blockquote><p>  第三种情况下，第一个参数会成为方法的目标。</p><blockquote><p>String::compareToIgnoreCase等价于(x,y) -&gt; x.compareToIgnoreCase(y);</p></blockquote><p>方法引用中也可以使用<code>this</code>和<code>super</code>，如super::instanceMethod.</p><h3 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h3><p>构造器引用用法与方法引用类似，只不过方法名为new。举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> []::<span class="keyword">new</span>  <span class="comment">//等价于 x -&gt; new int[x],x是数组的长度</span></span><br><span class="line">Perosn [] people = stream.toArray(Person::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>通常会使用lambda访问外围方法或类中的变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeatMessage</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    ActionListener listener = event -&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">repeatMessage(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure><p>这里str就是一个自由变量。我们说它被lambda捕获。</p><p>lambda表达式有3个部分：</p><ol><li>一个代码块</li><li>参数</li><li>自由变量的值，这里指非参数而且不在代码中定义的变量。</li></ol><p><strong>在Java中，lambda就是闭包</strong>。</p><p><strong>lambda只能捕获值不变的变量</strong>，指变量初始化后就不会再为它赋新值。</p><h3 id="处理lambda表达式"><a href="#处理lambda表达式" class="headerlink" title="处理lambda表达式"></a>处理lambda表达式</h3><p>使用lambda的重点是延迟执行，例如</p><ol><li>在一个单独的线程中运行代码</li><li>多次运行代码</li><li>在算法的合适位置运行代码(例如，排序中的比较操作)</li><li>发生某种情况时执行代码(如，点击了某个按钮，数据到达等)</li><li>只在必要时运行代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IntConsumer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> n, IntConsumer action)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">action.accept(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Student.repeat(<span class="number">10</span>,i-&gt; System.out.println(<span class="string">"CountDown:"</span>+(<span class="number">9</span>-i)));<span class="comment">//调用</span></span><br></pre></td></tr></table></figure><h3 id="再谈Comparator"><a href="#再谈Comparator" class="headerlink" title="再谈Comparator"></a>再谈Comparator</h3><p>Comparator接口包含很多的静态方法来创建构造器，这些方法可用于lambda表达式或方法引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(people,Comparator.comparing(Person::getName));<span class="comment">//按名字对people进行排序</span></span><br><span class="line">Arrays.sort(people,Comparator.comparing(Person::getLastName).thencomparing(Person::getFirstName));<span class="comment">//如果两人的姓一致则比较名；</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lambda表达式&quot;&gt;&lt;a href=&quot;#lambda表达式&quot; class=&quot;headerlink&quot; title=&quot;lambda表达式&quot;&gt;&lt;/a&gt;lambda表达式&lt;/h2&gt;&lt;h3 id=&quot;格式：参数-gt-表达式&quot;&gt;&lt;a href=&quot;#格式：参数-gt-表达式&quot; class=&quot;headerlink&quot; title=&quot;格式：参数 -&amp;gt; (表达式)&quot;&gt;&lt;/a&gt;格式：参数 -&amp;gt; (表达式)&lt;/h3&gt;&lt;p&gt;如果代码要完成的计算无法放在一个表达式中，可以把代码放在{}中。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Arrays.sort(str, (String first,String second) -&amp;gt; (&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (first.length()-second.length()))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;即使lambda无参数，也要提供空括号.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;()-&amp;gt; &amp;#123;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++) System.out.println(i);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果可以推导出一个lambda的参数类型，则可以忽略参数类型&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Arrays.sort(friends,(first,second) -&amp;gt; (first.length()-second.length()));&lt;span class=&quot;comment&quot;&gt;//friends是一个字符串数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;无需指定lambda的返回值类型，返回值类型会由上下文推导得到&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(String str1,String str2) -&amp;gt; str1.length()-str2.length();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java Notes" scheme="http://yoursite.com/tags/Java-Notes/"/>
    
  </entry>
  
  <entry>
    <title>Git笔记</title>
    <link href="http://yoursite.com/2019/11/23/Git%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/23/Git%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-23T09:47:42.000Z</published>
    <updated>2019-11-24T13:52:15.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载与安装Git"><a href="#下载与安装Git" class="headerlink" title="下载与安装Git"></a>下载与安装Git</h3><p><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git" target="_blank" rel="noopener">Git下载</a>，在git Bash下执行<code>git --version</code>，返回Git版本。</p><a id="more"></a> <h3 id="最小配置"><a href="#最小配置" class="headerlink" title="最小配置"></a>最小配置</h3><h4 id="配置user信息"><a href="#配置user信息" class="headerlink" title="配置user信息"></a>配置user信息</h4><ul><li><p>配置user.name和user.email：</p><blockquote><p>git conﬁg –global  user.name ‘your_name’</p><p>git conﬁg –global  user.email ‘<a href="mailto:your_email@domain.com" target="_blank" rel="noopener">your_email@domain.com</a>‘</p></blockquote></li></ul><h4 id="config的三个作用域"><a href="#config的三个作用域" class="headerlink" title="config的三个作用域"></a>config的三个作用域</h4><ul><li>缺省默认为local</li></ul><blockquote><p>git config –local：只对本地仓库生效</p><p>git config –global：对登录用户所有仓库生效</p><p>git config –system：对系统所有用户生效</p></blockquote><ul><li><p>显示config的配置，加上<code>--list</code></p><blockquote><p> git conﬁg –list –local  </p><p> git conﬁg –list –global </p><p> git conﬁg –list –system</p></blockquote></li><li><p>清除，加上 <code>--unset</code></p><blockquote><p>​git conﬁg –unset –local user.name  </p><p>git conﬁg –unset –global user.name </p><p>git conﬁg –unset –system user.name</p></blockquote></li><li><p>优先级：local&gt;global&gt;system</p></li></ul><h3 id="创建Git仓库"><a href="#创建Git仓库" class="headerlink" title="创建Git仓库"></a>创建Git仓库</h3><p>两种方式创建</p><ol><li><p>Git之前已有代码</p><blockquote><p>cd 文件夹</p><p>git init</p></blockquote></li><li><p>Git之前没有项目代码</p><blockquote><p>cd 文件夹</p><p>git init your_project_name</p><p>cd your_project_name</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载与安装Git&quot;&gt;&lt;a href=&quot;#下载与安装Git&quot; class=&quot;headerlink&quot; title=&quot;下载与安装Git&quot;&gt;&lt;/a&gt;下载与安装Git&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git下载&lt;/a&gt;，在git Bash下执行&lt;code&gt;git --version&lt;/code&gt;，返回Git版本。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="git Notes" scheme="http://yoursite.com/tags/git-Notes/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://yoursite.com/2019/11/22/Django%E6%A8%A1%E5%9E%8B%E5%B1%82_%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2019/11/22/Django%E6%A8%A1%E5%9E%8B%E5%B1%82_%E6%9F%A5%E8%AF%A2/</id>
    <published>2019-11-22T14:26:19.000Z</published>
    <updated>2019-11-23T08:55:08.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="执行查询"><a href="#执行查询" class="headerlink" title="执行查询"></a>执行查询</h2><p>创建数据模型后，Django自动提供了一套API来实现数据库的增删改查，模型代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    tagline = models.TextField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Author</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    email = models.EmailField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entry</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)</span><br><span class="line">    headline = models.CharField(max_length=<span class="number">255</span>)</span><br><span class="line">    body_text = models.TextField()</span><br><span class="line">    pub_date = models.DateField()</span><br><span class="line">    mod_date = models.DateField()</span><br><span class="line">    authors = models.ManyToManyField(Author)</span><br><span class="line">    n_comments = models.IntegerField()</span><br><span class="line">    n_pingbacks = models.IntegerField()</span><br><span class="line">    rating = models.IntegerField()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.headline</span><br></pre></td></tr></table></figure><a id="more"></a> <ul><li><p>创建对象</p><p>Django中一个模型就代表数据库中的一张表，模型类的实例代表数据库表中的一行记录。</p><p>创建一个对象进行初始化后，可调用save()保存到数据库中 ，可重写save()方法实现自定义保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> blog.models <span class="keyword">import</span> Blog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Blog(name=<span class="string">'Beatles Blog'</span>, tagline=<span class="string">'All the latest Beatles news.'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.save()</span><br></pre></td></tr></table></figure></li><li><p>修改对象</p><p>修改后调用save()方法保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b5.name = <span class="string">'New name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b5.save()</span><br></pre></td></tr></table></figure><ul><li><p>保存ForeignKey和ManyToManyField字段</p><p>更新ForeignKey字段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> blog.models <span class="keyword">import</span> Blog, Entry</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>entry = Entry.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>cheese_blog = Blog.objects.get(name=<span class="string">"Cheddar Talk"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>entry.blog = cheese_blog</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>entry.save()</span><br></pre></td></tr></table></figure><p>更新ManyToManyField字段要调用add()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> blog.models <span class="keyword">import</span> Author</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>joe = Author.objects.create(name=<span class="string">"Joe"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>entry.authors.add(joe)</span><br></pre></td></tr></table></figure><p>add()方法可一次传入多个参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entry.authors.add(john, paul, george, ringo)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检索对象</p><p>通过模型类的Manager来构建queryset，每个模型至少有一个Manager，默认名称是objects</p><ul><li><p>检索全部对象</p><p>all()方法返回全部对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_entries = Entry.objects.all()</span><br></pre></td></tr></table></figure></li><li><p>通过过滤器检索指导对象</p><p><code>filter(**kwargs)</code></p><p>返回一个新的 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet" target="_blank" rel="noopener"><code>QuerySet</code></a>，包含的对象满足给定查询参数。</p><p><code>exclude(**kwargs)</code></p><p>返回一个新的 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet" target="_blank" rel="noopener"><code>QuerySet</code></a>，包含的对象不满足给定查询参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__year=<span class="number">2006</span>) <span class="comment"># 筛选出满足条件的对象</span></span><br><span class="line">Entry.objects.exclude(pub_date__year=<span class="number">2006</span>) <span class="comment"># 筛选出不满足条件的对象</span></span><br></pre></td></tr></table></figure><ul><li><p>链式过滤器</p><p>queryset的结果还是返回一个新的queryset，所以可链式调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>Entry.objects.filter(</span><br><span class="line"><span class="meta">... </span>    headline__startswith=<span class="string">'What'</span></span><br><span class="line"><span class="meta">... </span>).exclude(</span><br><span class="line"><span class="meta">... </span>    pub_date__gte=datetime.date.today()</span><br><span class="line"><span class="meta">... </span>).filter(</span><br><span class="line"><span class="meta">... </span>    pub_date__gte=datetime.date(<span class="number">2005</span>, <span class="number">1</span>, <span class="number">30</span>)</span><br><span class="line"><span class="meta">... </span>)</span><br></pre></td></tr></table></figure><ul><li><p>queryset都是惰性的</p><p>创建 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet" target="_blank" rel="noopener"><code>QuerySet</code></a> 并不会引发任何数据库活动。你可以将一整天的过滤器都堆积在一起，Django 只会在 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet" target="_blank" rel="noopener"><code>QuerySet</code></a> 被 计算 时执行查询操作 。</p></li></ul></li></ul></li><li><p>用get()获得单个对象</p><p>不同于filter()总是返回一个queryset，get()只会返回单个对象，当返回多个对象时Django 会抛出 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/exceptions/#django.core.exceptions.MultipleObjectsReturned" target="_blank" rel="noopener"><code>MultipleObjectsReturned</code></a>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one_entry = Entry.objects.get(pk=<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>限制queryset条目数</p><p>利用python切片语法将queryset切成指定长度，等价于 SQL 的 <code>LIMIT</code> 和 <code>OFFSET</code> 子句 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回前5个对象</span></span><br><span class="line">Entry.objects.all()[:<span class="number">5</span>]</span><br><span class="line"><span class="comment"># 返回第6到10个对象</span></span><br><span class="line">Entry.objects.all()[<span class="number">5</span>:<span class="number">10</span>]</span><br></pre></td></tr></table></figure></li><li><p>字段查询</p><p>字段查询即你如何制定 SQL <code>WHERE</code> 子句。 它们以关键字参数的形式传递给 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet" target="_blank" rel="noopener"><code>QuerySet</code></a> 方法 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet.filter" target="_blank" rel="noopener"><code>filter()</code></a>， <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet.exclude" target="_blank" rel="noopener"><code>exclude()</code></a> 和 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/querysets/#django.db.models.query.QuerySet.get" target="_blank" rel="noopener"><code>get()</code></a>。 </p><p>*<em>基本的查询关键字参数遵照 <code>field__lookuptype=value</code> *</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(pub_date__lte=<span class="string">'2018-09-20'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>| 转化成SQL语句大致是：</p><p>   SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2018-09-20’;</p></blockquote></li><li><p>跨关系查询</p><p>要跨越关系，只需跨模型使用关联字段名，字段名由双下划线分割，直到拿到想要的字段。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objecst.filter(blog__name=<span class="string">'flbu blog'</span>)</span><br></pre></td></tr></table></figure><p>反向操作也能行。要指向一个“反向的”关联关系，只需使用模型名的小写。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blog.objects.filter(entry__headline__contains=<span class="string">'Lennon'</span>)</span><br></pre></td></tr></table></figure></li><li><p>过滤器为模型指定字段</p><p>将模型字段与同一模型的另一字段作比较。</p><ul><li><p>F表达式</p><p>F()的实例充当查询字段的引用，这些引用可以实现在同一模型实例中比较不同的字段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F</span><br><span class="line">Entry.objects.filter(number_of_comments__gt=F(<span class="string">'number_of_pingbacks'</span>))</span><br></pre></td></tr></table></figure><p>Django支持对<code>F()</code>对象进行加减乘除求余和次方等数学运算，另一操作数既可以是常量，也可是另一F()对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(number_of_comments__gt=F(<span class="string">'number_of_pingbacks'</span>) * <span class="number">2</span>)</span><br><span class="line">Entry.objects.filter(rating__lt=F(<span class="string">'number_of_comments'</span>) + F(<span class="string">'number_of_pingbacks'</span>))</span><br></pre></td></tr></table></figure><p><strong>也可以用双下划线在<code>F()</code>对象中进行跨关系查询</strong>，带有双下划线的 <code>F()</code> 对象将引入访问关联对象所需的任何连接 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(authors__name=F(<span class="string">'blog__name'</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主键(pk)查询快捷方式</p><p><code>pk</code> 表示主键 “primary key” 。</p><p>在示例Blog模型中，主键是id，所以以下查询等价</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Blog.objects.get(id__exact=<span class="number">14</span>) <span class="comment"># Explicit form</span></span><br><span class="line">Blog.objects.get(id=<span class="number">14</span>) <span class="comment"># __exact is implied</span></span><br><span class="line">Blog.objects.get(pk=<span class="number">14</span>) <span class="comment"># pk implies id__exact</span></span><br></pre></td></tr></table></figure><p><code>pk</code>的查询并不局限于<code>__exact</code>，任何的查询项都能接在<code>pk</code>的后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get blogs entries with id 1, 4 and 7</span></span><br><span class="line"> Blog.objects.filter(pk__in=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all blog entries with id &gt; 14</span></span><br><span class="line"> Blog.objects.filter(pk__gt=<span class="number">14</span>)</span><br></pre></td></tr></table></figure><p><code>pk</code>也支持跨连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.filter(blog__id__exact=<span class="number">3</span>) <span class="comment"># Explicit form</span></span><br><span class="line">Entry.objects.filter(blog__id=<span class="number">3</span>)        <span class="comment"># __exact is implied</span></span><br><span class="line">Entry.objects.filter(blog__pk=<span class="number">3</span>)        <span class="comment"># __pk implies __id__exact</span></span><br></pre></td></tr></table></figure></li><li><p>通过Q对象完成复杂查询</p><p>在<code>filter()</code>中，查询使用的关键字参数使用AND连接，如果要执行更加复杂的查询，可以使用<code>Q</code>对象</p><p><code>Q</code> 对象能通过 <code>&amp;</code> 和 <code>|</code> 操作符连接起来。当操作符被用于两个 <code>Q</code> 对象之间时会生成一个新的 <code>Q</code> 对象。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Q(question__startswith=<span class="string">'Who'</span>) | Q(question__startswith=<span class="string">'What'</span>)</span><br><span class="line"><span class="comment"># 等价于SQL WHERE 语句：WHERE question LIKE 'Who%' OR question LIKE 'What%'</span></span><br></pre></td></tr></table></figure><p><code>Q</code>对象可通过<code>~</code>反转，代表NOT</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q(question__startswith=<span class="string">'Who'</span>) | ~Q(pub_date__year=<span class="number">2005</span>)</span><br></pre></td></tr></table></figure><p>每个查询函数可接受一个或多个<code>Q</code>对象作为位置参数，若提供了多个<code>Q</code>对象参数，这些参数会通过 “AND” 连接 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Poll.objects.get(</span><br><span class="line">    Q(question__startswith=<span class="string">'Who'</span>),</span><br><span class="line">    Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">2</span>)) | Q(pub_date=date(<span class="number">2005</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>查询函数可混合使用 <code>Q</code> 对象和关键字参数 ，均通过 “AND” 连接 。但<strong><code>Q</code> 对象必须位于所有关键字参数之前</strong>。 </p></li><li><p>比较对象总会使用主键值</p></li><li><p>删除对象</p><p>通过调用<code>delete()</code>方法删除对象，也可以通过<code>QuerySet</code>批量删除对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e.delete()</span><br><span class="line"><span class="comment"># 返回被删除的对象数量和一个包含了每个被删除对象类型的数量的字典</span></span><br><span class="line">(<span class="number">1</span>, &#123;<span class="string">'weblog.Entry'</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 删除QuerySet中的所有成员</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Entry.objects.filter(pub_date__year=<span class="number">2005</span>).delete()</span><br><span class="line">(<span class="number">5</span>, &#123;<span class="string">'webapp.Entry'</span>: <span class="number">5</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>批量修改对象</p><p>可通过<code>update()</code>修改<code>QuerySet</code>中所有对象的一个字段，仅能用此方法设置非关联字段和 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> 字段 </p><p>调用更新方法时也可以使用<code>F</code>表达式，但只能引用被更新模型的内部字段 。若在更新方法中使用 <code>F()</code> 对象的同时使用 join ，会抛出一个 <code>FieldError()</code> </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Entry.objects.all().update(number_of_pingbacks=F(<span class="string">'number_of_pingbacks'</span>) + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This will raise a FieldError</span></span><br><span class="line"> Entry.objects.update(headline=F(<span class="string">'blog__name'</span>))</span><br></pre></td></tr></table></figure></li><li><p>关联对象</p><p>一个 <code>Entry</code> 对象 <code>e</code> 通过 <code>blog</code> 属性可以获取其关联的 <code>Blog</code> 对象： <code>e.blog</code> ，一个 <code>Blog</code> 对象 <code>b</code> 能通过 <code>entry_set</code> 属性 <code>b.entry_set.all()</code> 访问包含所有关联 <code>Entry</code> 对象的列表 。</p><ul><li><p>一对多关联</p><ul><li><p>正向访问</p><p>对外键的修改直到你调用 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/instances/#django.db.models.Model.save" target="_blank" rel="noopener"><code>save()</code></a> 后才会被存入数据库 </p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">e = Entry.objects.get(id=<span class="number">2</span>)</span><br><span class="line">e.blog <span class="comment"># Returns the related Blog object</span></span><br><span class="line"></span><br><span class="line">e = Entry.objects.get(id=<span class="number">2</span>)</span><br><span class="line">e.blog = some_blog</span><br><span class="line">e.save()</span><br></pre></td></tr></table></figure></li><li><p>反向关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = Blog,objects.get(pk=<span class="number">1</span>)</span><br><span class="line">b.entry_set.all()</span><br></pre></td></tr></table></figure><p>可以在定义 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> 时设置 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ForeignKey.related_name" target="_blank" rel="noopener"><code>related_name</code></a> 参数重写这个 <code>FOO_set</code> 名。例如，若修改 <code>Entry</code> 模型为 <code>blog = ForeignKey(Blog, on_delete=models.CASCADE, related_name=&#39;entries&#39;)</code>，前文示例代码会看起来像这样 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = Blog.objects.get(id=<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.entries.all() <span class="comment"># Returns all Entry objects related to Blog.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b.entries is a Manager that returns QuerySets.</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.entries.filter(headline__contains=<span class="string">'Lennon'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.entries.count()</span><br></pre></td></tr></table></figure></li><li><p>管理关联对象的方法</p><ol><li><p><code>add(obj1, obj2, ...)</code></p><p>将特定的模型对象加入关联对象集合。</p></li><li><p><code>create(**kwargs)</code></p><p>创建一个新对象，保存，并将其放入关联对象集合中。返回新创建的对象。</p></li><li><p><code>remove(obj1, obj2, ...)</code></p><p>从关联对象集合删除指定模型对象.</p></li><li><p><code>clear()</code></p><p>从关联对象集合删除所有对象。</p></li><li><p><code>set(objs)</code></p><p>替换关联对象集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b = Blog.objects.get(id=<span class="number">1</span>)</span><br><span class="line">b.entry_set.set([e1, e2])</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>多对多关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">e = Entry.objects.get(id=<span class="number">3</span>)</span><br><span class="line">e.authors.all() <span class="comment"># Returns all Author objects for this Entry.</span></span><br><span class="line">e.authors.count()</span><br><span class="line">e.authors.filter(name__contains=<span class="string">'John'</span>)</span><br><span class="line"></span><br><span class="line">a = Author.objects.get(id=<span class="number">5</span>)</span><br><span class="line">a.entry_set.all() <span class="comment"># Returns all Entry objects for this Author.</span></span><br></pre></td></tr></table></figure><p>和 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ForeignKey" target="_blank" rel="noopener"><code>ForeignKey</code></a> 一样， <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ManyToManyField" target="_blank" rel="noopener"><code>ManyToManyField</code></a> 能指定 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ManyToManyField.related_name" target="_blank" rel="noopener"><code>related_name</code></a>。在上面的例子中，若 <code>Entry</code> 中的 <a href="https://docs.djangoproject.com/zh-hans/2.2/ref/models/fields/#django.db.models.ManyToManyField" target="_blank" rel="noopener"><code>ManyToManyField</code></a> 已指定了 <code>related_name=&#39;entries&#39;</code>，随后每个 <code>Author</code> 实例会拥有一个 <code>entries</code> 属性，而不是 <code>entry_set</code>。 </p></li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;执行查询&quot;&gt;&lt;a href=&quot;#执行查询&quot; class=&quot;headerlink&quot; title=&quot;执行查询&quot;&gt;&lt;/a&gt;执行查询&lt;/h2&gt;&lt;p&gt;创建数据模型后，Django自动提供了一套API来实现数据库的增删改查，模型代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tagline = models.TextField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Author&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    email = models.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    headline = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    body_text = models.TextField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pub_date = models.DateField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mod_date = models.DateField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    authors = models.ManyToManyField(Author)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n_comments = models.IntegerField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n_pingbacks = models.IntegerField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rating = models.IntegerField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.headline&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Django" scheme="http://yoursite.com/categories/Django/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Django model" scheme="http://yoursite.com/tags/Django-model/"/>
    
  </entry>
  
</feed>
